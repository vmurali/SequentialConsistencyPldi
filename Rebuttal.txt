Some of the questions raised by the first three reviewers are addressed in the
comments of the Reviewer D.

We have submitted the source code of our Coq development as a supplement to our
paper in the submission website (we didn't give any link to preserve
anonymity).

We have structured the proofs modularly as described in the paper. Thus, the
proofs of the different components can be reused while changing the other
components. For example, the proof of the cache-coherence protocol can be
reused as is for verifying other (non-sequentially consistent) systems.
Moreover, the proof of the cache-coherence is itself modular and can be adopted
to other protocols (like MESI, MOSI); The proofs for Lemmas 2 to 5 will change,
but the lemmas correspond to at most 3 components (and states) and hence can be
easily proved (even using techniques like model-checking).

We agree with Reviewer-D that proving liveness is important and non-trivial.
The example of ParentSendReq is an example of a voluntary rule, and the policy
to fire such a rule does indeed affect the liveness. In our development, we
haven't proved full liveness of the system (which includes the liveness of the
processor), but we have proved the following which specifies the liveness of
the cache-coherence protocol:
a) Any request (or response) that a cache wants to send can eventually be sent
(either to its parent or to its children)
b) Under the assumption that a parent will eventually "decide" to send a
downgrade request to its children (using ParentSendReq rule) whenever it sees
an upgrade request from a child (as opposed to ignoring such an upgrade request
from a child forever), every request sent to either the parent or to a child
will eventually get a response.

We chose "halting" for pedagogical reasons in the paper; in our actual Coq
development, we use the more traditional trace-equivalence definition requiring
inter-convertible states. It is worth noting that any safety property can be
reduced to the problem of halting.

We believe such a modular technique for verifying full-system correctness with
respect to SC will be useful for hardware designers/verification-engineers to
independently verify different components of the system. We can't be sure that
everything will generalize effortlessly to the trickiest relaxed memory models
(like those exhibited by ARM/POWER as pointed by Reviewer-C because of no
verification loads and/or shared store buffers), but it would have been hard to
figure out the basic framework if we started on more complex examples first.
We still think our example is quite complex and interesting, which Reviewer-D
seems to agree with.

Reviewer-C, please note that verification loads do indeed ensure correctness.
This is true even if there were stores to that address in between the
speculative load and the verification load, as long as the final store read by
the verification load writes the same value as the speculative load. Our final
theorem ensures this; otherwise the speculative system will not be an
implementation of the SC reference system.

Reviewer-B please note that our SC model is exactly as specified by Lamport.
Also please note that by local buffers in Figure 2, we do not mean just store
buffers; it includes all local data accessible to the processor.

Thanks for notifying us of other related work (Hu et.al.'s "Decidable SC"
SPAA'03, Qadeer's "Verifying SC by model-checking" TPDS'03, Sorin's
"Verification-aware Architectures" PACT'07, "Lamport Clocks: Verifying
Directory Cache-Coherence Protocol" SPAA'98 and Moore's "ACL2 proof of cache
coherence" CAV'98), and for pointing the other bugs in our related work
section.

Reviewer-B's concerns:
- Ideal processor and memory: As described in that paragraph - memory responds
  instantaneously and processor executes atomically without speculation
- Bluespec served as the model: The motivation for LTS comes from using
  Bluespec to describe hardware, which is similar to our LTS formalization.
- Bluespec's competitive performance can be seen from [Dave et al. 2005], and
  other papers using Bluespec designs.
- Peek-beneath abstraction boundaries: To prove the full-system, the
  individual components are treated as black-boxes, completely captured by their
  interface specification.
- Good-ideas from the world of PL semantics: Using LTSes as a precise hardware
  specification.
- Infinite families of hardware design resist reduction to finite-state
  models: reduction is applied to 'infinite families'
- Figure 2: logical view of system as 3-components: It is more-or-less accepted
  in the architecture community.
- Refining vs Equivalent: Throughout the paper, we are showing only refinement
  in one direction, though you are correct that in this particular example they
  are equivalent.
- Finer-grained architectural details: As mentioned in that paragraph (like
  register-renaming).
- Main-memory still exposes atomic loads and stores: Most architectures (including
  POWER and ARM) can be modeled using a memory that responds to loads and stores
  instantaneously, though the response (or request) can sit in a buffer between
  the memory and the processor, leading to relaxed memory models.
