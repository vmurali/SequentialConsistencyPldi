Reviewer-E

1. On Describing LTSes:

We include the LTS description for the benefit of readers unfamiliar with it;
the point wasn't to present novel concepts.

2. Modularity

 One of the major benefits of our approach is that it unifies the
 modularization of the design and its verification task which enables
 verification to be done in tandem with mircoarchitectural design as noted by
 Reviewer-E.  Further, this allows us to require only incremental verification
 effort for an incremental microarchitectural change, enabling scaling of the
 verification task.
 
3. Model Checking vs. Theorem Proving

a. Finding invariants is fundamentally hard. In [PAPER], 

Finding invariants is fundamentally hard. We are equivalent in complexity but
  because of our modularization we have a free source of abstraction from the
  designer.

   - In comparision, Quote paper. Invariants were dervied manually, took one
  month, and relied on a manual abstraction of the system space based on
  symettry. Our work is similar save that we do not require an abstraction. 

  In comparision to the <PAPER>, our invariants of similar complexity. In
  general, we believe that such invariants relatively simple but subtle and
  generally intuitively understood by the designers. 

b. On Case-Analysis: 

Much of the requisite protocol case analysis is done automatically via
proof-script automation in Coq. In our experience, cases where proof-script
automation fail required an additional invariant; we strongly believe that
manually providing a similiar invariant are necessary in a model checking
approach.

c. Benefits of TP-based parameterization: It should also be noted that their
  work while hierarchical is only 2-level while ours applies to arbitrary
  levels of hierarchy.


4. Pipelining protocol engines and Bluespec:

While atomic transitions in our paper have one-at-a-time semantics, the
Bluespec compiler generates hardware which executes independant transitions
concurrently in a clock cycle. The Bluespec compiler excels at this
optimization. Atomic transition can also be spread across multiple clock
cycles, while maintaining atomic transaction semantics [Karczmarek,
MEMOCODE'14].

Reviewer-F:

1. Evidence of proofs being machine-checked:

We submitted the source code of our Coq development as a supplement to our
paper in the submission website.

2. Figure 3, tags in Figures 5 & 6:
Both these points are valid and we should have indicated them explicitly.

3. Figure 6: Clarification of the third case: The "upd" function merely
determines if the "real" state of the system is as dictated by (s,pc) or if it
should be modified to take into account memory responses. If the processor
is not waiting for a memory response, then the state is exactly (s,pc). We made
an optimization in the fourth case where we make the real state H whenever we
know that the next instruction we decode is H; we could have it as (s,pc)
instead.

4. Figure 8: Tags for non-speculative loads: Our invariant is that there can be
only one outstanding non-speculative load, though there can be several
outstanding speculative loads concurrently. Anything without a tag is the
current non-speculative load, and anything with a tag is a speculative load.

========================

4. Invariants are the hardest part in parametric verification of a cache
coherence protocol, and we do not mention it:
We do mention the high level theorems that we use in the paper.  While we
restrict ourselves to the verification of the MSI protocol's implementation,
the proof is modular, and a large portion of the proof can be used, as is, for
verification of other protocols (like MESI, MOSI and MOESI), as we discuss in
the previous rebuttal. The theorem prover helps construct and prove the high
level theorems that make these protocols correct. These theorems depend on a
few basic properties that can be established easily, but were not mentioned in
the paper due to lack of space. These properties include a) state changes occur
when and only when response messages are sent, b) the absence of response
messages from the parent to a child and from the same child to the parent
simultaneously in the network, for the same address and c) FIFO properties of
the responses. These basic properties seem to be the foundation over which the
other cache coherence protocols are built -- they eliminate the corner cases,
simplifying the proof. For example, since responses from a child to its parent
and from the parent to the same child for the same address cannot be present
simultaneously, an upgrade response from the parent cannot cross a downgrade
response from the child, which would have eventually led to the upgrade of the
child and downgrade of the parent, violating Lemma 3. As pointed out by
Reviewer-E, the theorems and these properties serve as a method to derive a
correct protocol (the different protocols are different system instances which
obey these properties).




=====================================================================================================
= Our Notes
=====================================================================================================


Reviewer-E's related work summary:

FM methodology: The methodology used for proving that the memory system
realizes cache coherence is not new. A theorem-proving approach to verifying
memory systems has been tacit in many publications. Researchers preferred model
checking, as opposed to pushing through theorem-proving based proofs, largely
because of the daunting complexity of realistic memory system protocols. One
can find several approaches that address specific aspects of memory system
verification in, say, Wim Hesselink's work :
http://www.informatik.uni-trier.de/~ley/pers/hd/h/Hesselink:Wim_H=.

@@@ Murali response
Lots of PVS-based proofs for concurrent algorithms, mutual exclusion, etc...
(Needs to be read further, but it's just a bunch of mechanized proofs for
a lot of concurrent algorithms)
***

There has of course been recent trends to simplify protocols thru the DeNoVo
project:
http://scholar.google.com/citations?view_op=view_citation&hl=en&user=ufGYoL0AAAAJ&citation_for_view=ufGYoL0AAAAJ:8k81kl-MbHgC
The authors have not cited such related pieces of work and justified the
simplicity of their design. 

@@@ Murali response
A new non-conventional cache coherence protocol that produces sequentially
consistent results for data-rate free programs. There's no formal proof that
this protocol is correct...
(Needs to be read further, but doesn't seem relevant)
***

The authors claim that they are achieving their proof for an arbitrary number
of processors. They do not mention anything about the invariants involved in
their parametric proofs. This leads me to suspect that these invariants are
pretty straightforward.  If one harks back to work addressing real protocols,
the Chou, Mannava, Park work
(http://scholar.google.com/citations?view_op=view_citation&hl=en&user=ufGYoL0AAAAJ&citation_for_view=ufGYoL0AAAAJ:qjMakFHDy7sC)
shows how exceedingly hard it is to discover these invariants. In fact, the CMP
approach is an incremental CEGAR-style method for discovering these invariants.
Stating these invariants explicitly would be virtually impossible - even for
FLASH-like protocols.  In fact, a whole series of papers have tried to address
invariant discovery in this space : http://dl.acm.org/citation.cfm?id=1517434

@@@ Murali response
Chou, Mannava, Park [CMP-method] approach uses three paradigms: a) symmetry of
cache coherence protocols b) abstraction of several nodes which behaves as just
another node and c) counter-example guided abtraction refinement (CEGAR) for
refining the abstraction's properties. Using CEGAR, they get invariants for the
rest of the system while concentrating on a finite number of nodes (2).  Each
refinement will not restrict the behavior, but will help towards proving a
safety property. Specifically, let P be an invariant for the abstract
transition system, and we should prove that it satisfies safety property X. We
start out with a P that doesn't satisfy X. Then we add constraints on P, while
permitting the same transitions. Eventually P will satisfy X. The manual
portion of this procedure is in strengthening P.
***

@@@ Murali response
The second paper tries to formulate better invariants in the first place using
the notion of "flows". It says what other messages can interfere when the other
message is being processed...
(Needs to be read further -- I don't understand "flows" clearly; can't say
anything more before I understand that properly)
***

For hierarchical protocols, this work has been extended in e.g.,
http://link.springer.com/article/10.1007%2Fs10703-010-0092-y

@@@ Murali response
Same approach as [CMP-method] to hierarchical protocols. It models only 2 level hierarchies!
***
