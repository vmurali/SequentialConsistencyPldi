One of the major benefits of our approach is that it unifies the modularization
of the design and its verification task which enables verification to be done
in tandem with micro-architectural design (as noted by Reviewer-E). Further,
this allows us to require only incremental verification effort for an
incremental micro-architectural change, enabling scaling of the verification
task.
 
Reviewer-E:

Our approach vs. Model-Checking-based:

a) Deriving Invariants:
Finding invariants is fundamentally hard. The CMP-method (Reviewer-E) uses
symmetry to abstract the system, and then inserts "non-interference-lemmas"
manually to eliminate counter-examples that violate the required property.
Flow-based methodology [1] gives yet another way of manually specifying
invariants. In general, we believe that the level of complexity of the lemmas
in the two approaches are similar.  For example, for the FLASH protocol, one of
the non-interference-lemma (Lemma-5 in [2]) says that whenever a cache is in
E-state, then its data is up-to-date which is similar to our Lemma-1. The
invariants are subtle but are intuitively understood at the time of design of
each module, making the task of formalizing them during the module's
verification straightforward. 

The verification of the hierarchical protocol in [3] is restricted to 2-levels
whereas our work applies to arbitrary levels of hierarchy. We are not sure if
it's a fundamental restriction on the CMP-method, since the kind of symmetry
that CMP-method exploits in a one/two-level system is not present in a
hierarchical system.

b) Case-Analysis:
Much of the requisite case-analysis is done automatically via proof-script
automation in Coq. In our experience, cases where proof-script automation fail
required an additional invariant; we believe that manually providing a similar
invariant is necessary even in a model-checking approach.

Pipelining protocol-engines:
While atomic transitions in our paper have one-at-a-time semantics, the
Bluespec compiler generates hardware which executes independent transitions
concurrently in a clock cycle (as the semantics aren't violated); the compiler
excels at this optimization. Atomic transition can also be spread across
multiple clock cycles, while maintaining the semantics [4].

On Describing LTSes:
We include the LTS description for the benefit of readers unfamiliar with it;
the point wasn't to present novel concepts.

Reviewer-F:

Evidence of machine-checked proofs:
We submitted our Coq source code as a supplement to our paper in the submission
website.

Figure-3, no tags in Figures-5,6:
Both these points are valid and we should have indicated them explicitly.

Figure-6, third-case:
The "upd" function merely determines if the "real" state of the system is as
dictated by (s,pc) or if it should be modified to take into account memory
responses. If the processor is not waiting for a memory response, then the
state is exactly (s,pc). We made an optimization in the fourth case where we
make the real state H whenever we know that the next instruction we decode is
H; we could have it as (s,pc) instead.

Figure-8: tags for non-speculative loads:
Our invariant is that there can be only one outstanding non-speculative load
(ie. loads without tags), though there can be several outstanding speculative
loads (ie. loads with tags) concurrently.

Beyond 500 words:
References:
[1] Parameterized Verification using Message Flows: An Industrial Experience,
John O'Leary, Murali Talupur, Mark R. Tuttle, FMCAD'09
[2] A Simple Method for Parameterized Verification of Cache Coherence Protocols,
Ching-Tsun Chou, Phanindra K. Mannava, Seungjoon Park, FMCAD'04
[3] Efficient methods for formally verifying safety properties of hierarchical
cache coherence protocol, Xiaofang Chen, Yu Yang, Ganesh Gopalakrishnan,
Ching-Tsun Chou, FMSD'10
[4] A new synthesis procedure for atomic rules containing multi-cycle function
blocks, Michal Karczmarek, Arvind, Muralidaran Vijayaraghavan, MEMOCODE'14
